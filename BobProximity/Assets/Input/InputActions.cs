//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PCMap"",
            ""id"": ""62499dcc-dbd3-4c63-ab82-f241eea0856e"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""1db5b295-f6da-4d11-b617-e65569fdc193"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ccad9095-6085-4674-b609-630a890e211a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7cd6f8bf-126b-4a9d-bc07-1a9d6c6b4860"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17b47567-367f-4091-b7fc-12198bdf0f02"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MobileMap"",
            ""id"": ""0442e94a-9d75-4738-93e7-6994e9825b03"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""133fe763-51d3-4ddb-9218-278c4149e08e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89f03fd1-fe72-42c9-93aa-25af49a267a6"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PCMap
        m_PCMap = asset.FindActionMap("PCMap", throwIfNotFound: true);
        m_PCMap_MouseClick = m_PCMap.FindAction("MouseClick", throwIfNotFound: true);
        m_PCMap_MouseMovement = m_PCMap.FindAction("MouseMovement", throwIfNotFound: true);
        // MobileMap
        m_MobileMap = asset.FindActionMap("MobileMap", throwIfNotFound: true);
        m_MobileMap_Tap = m_MobileMap.FindAction("Tap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PCMap
    private readonly InputActionMap m_PCMap;
    private List<IPCMapActions> m_PCMapActionsCallbackInterfaces = new List<IPCMapActions>();
    private readonly InputAction m_PCMap_MouseClick;
    private readonly InputAction m_PCMap_MouseMovement;
    public struct PCMapActions
    {
        private @InputActions m_Wrapper;
        public PCMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_PCMap_MouseClick;
        public InputAction @MouseMovement => m_Wrapper.m_PCMap_MouseMovement;
        public InputActionMap Get() { return m_Wrapper.m_PCMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCMapActions set) { return set.Get(); }
        public void AddCallbacks(IPCMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PCMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PCMapActionsCallbackInterfaces.Add(instance);
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @MouseMovement.started += instance.OnMouseMovement;
            @MouseMovement.performed += instance.OnMouseMovement;
            @MouseMovement.canceled += instance.OnMouseMovement;
        }

        private void UnregisterCallbacks(IPCMapActions instance)
        {
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @MouseMovement.started -= instance.OnMouseMovement;
            @MouseMovement.performed -= instance.OnMouseMovement;
            @MouseMovement.canceled -= instance.OnMouseMovement;
        }

        public void RemoveCallbacks(IPCMapActions instance)
        {
            if (m_Wrapper.m_PCMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPCMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PCMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PCMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PCMapActions @PCMap => new PCMapActions(this);

    // MobileMap
    private readonly InputActionMap m_MobileMap;
    private List<IMobileMapActions> m_MobileMapActionsCallbackInterfaces = new List<IMobileMapActions>();
    private readonly InputAction m_MobileMap_Tap;
    public struct MobileMapActions
    {
        private @InputActions m_Wrapper;
        public MobileMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_MobileMap_Tap;
        public InputActionMap Get() { return m_Wrapper.m_MobileMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileMapActions set) { return set.Get(); }
        public void AddCallbacks(IMobileMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileMapActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
        }

        private void UnregisterCallbacks(IMobileMapActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
        }

        public void RemoveCallbacks(IMobileMapActions instance)
        {
            if (m_Wrapper.m_MobileMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileMapActions @MobileMap => new MobileMapActions(this);
    public interface IPCMapActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMouseMovement(InputAction.CallbackContext context);
    }
    public interface IMobileMapActions
    {
        void OnTap(InputAction.CallbackContext context);
    }
}
