//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MobileMap"",
            ""id"": ""0442e94a-9d75-4738-93e7-6994e9825b03"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""PassThrough"",
                    ""id"": ""133fe763-51d3-4ddb-9218-278c4149e08e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPressed"",
                    ""type"": ""Button"",
                    ""id"": ""2a0c82cd-7a35-4c92-adaf-00717de9a513"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""174b396d-9a57-4c21-9ced-0d95836e63de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89f03fd1-fe72-42c9-93aa-25af49a267a6"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f8a87ba-84a6-4f4d-bf65-d2282ff2fcd8"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3cf614f-967b-4f43-9e67-14fcc1b10940"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileMap
        m_MobileMap = asset.FindActionMap("MobileMap", throwIfNotFound: true);
        m_MobileMap_Tap = m_MobileMap.FindAction("Tap", throwIfNotFound: true);
        m_MobileMap_TapPressed = m_MobileMap.FindAction("TapPressed", throwIfNotFound: true);
        m_MobileMap_TapPosition = m_MobileMap.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileMap
    private readonly InputActionMap m_MobileMap;
    private List<IMobileMapActions> m_MobileMapActionsCallbackInterfaces = new List<IMobileMapActions>();
    private readonly InputAction m_MobileMap_Tap;
    private readonly InputAction m_MobileMap_TapPressed;
    private readonly InputAction m_MobileMap_TapPosition;
    public struct MobileMapActions
    {
        private @InputActions m_Wrapper;
        public MobileMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_MobileMap_Tap;
        public InputAction @TapPressed => m_Wrapper.m_MobileMap_TapPressed;
        public InputAction @TapPosition => m_Wrapper.m_MobileMap_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_MobileMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileMapActions set) { return set.Get(); }
        public void AddCallbacks(IMobileMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileMapActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @TapPressed.started += instance.OnTapPressed;
            @TapPressed.performed += instance.OnTapPressed;
            @TapPressed.canceled += instance.OnTapPressed;
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
        }

        private void UnregisterCallbacks(IMobileMapActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @TapPressed.started -= instance.OnTapPressed;
            @TapPressed.performed -= instance.OnTapPressed;
            @TapPressed.canceled -= instance.OnTapPressed;
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
        }

        public void RemoveCallbacks(IMobileMapActions instance)
        {
            if (m_Wrapper.m_MobileMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileMapActions @MobileMap => new MobileMapActions(this);
    public interface IMobileMapActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapPressed(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
